import React, { useEffect } from "react";
import { StyleSheet, View } from "react-native";
import { useTheme, Button } from "react-native-paper";
import { useLocalSearchParams, router } from "expo-router";
import { SafeAreaView } from "react-native-safe-area-context";
import { useFlashcardNavigation } from "@src/hooks/useFlashcardNavigation";
import CustomText from "@components/ui/CustomText";
import Flashcard from "@components/ui/Flashcard";
import LoadingIndicator from "@components/ui/LoadingIndicator";

export default function CategoryFlashcardsScreen() {
  const theme = useTheme();
  const { id, name } = useLocalSearchParams<{ id: string; name: string }>();
  const {
    currentFlashcard,
    currentIndex,
    flipped,
    isLoading,
    error,
    fetchFlashcards,
    handleFlip,
    handleNext,
    handlePrevious,
    totalCards,
    hasNext,
    hasPrevious,
  } = useFlashcardNavigation({ id });

  useEffect(() => {
    fetchFlashcards();
  }, [id]);

  if (isLoading && totalCards === 0) {
    return (
      <View style={[styles.container, styles.centered]}>
        <LoadingIndicator modal={false} />
        <CustomText style={{ marginTop: 16 }}>
          ðŸ¤– Thinking hard... AI is generating your flashcards!
        </CustomText>
      </View>
    );
  }

  if (error) {
    return (
      <View style={[styles.container, styles.centered]}>
        <CustomText variant="bodyLarge" style={styles.errorText}>
          {error}
        </CustomText>
        <Button mode="contained" onPress={fetchFlashcards}>
          Retry
        </Button>
      </View>
    );
  }

  if (totalCards === 0) {
    return (
      <View style={[styles.container, styles.centered]}>
        <CustomText variant="bodyLarge">
          No flashcards found for this category.
        </CustomText>
        <Button mode="contained" onPress={() => router.back()}>
          Go Back
        </Button>
      </View>
    );
  }

  return (
    <SafeAreaView
      style={[styles.container, { backgroundColor: theme.colors.background }]}
    >
      <View style={styles.header}>
        <CustomText variant="titleLarge" bold>
          {name} Flashcards
        </CustomText>
        <CustomText variant="bodyMedium">
          Card {currentIndex + 1} of {totalCards}
        </CustomText>
      </View>

      {currentFlashcard && (
        <Flashcard
          flashcard={currentFlashcard}
          flipped={flipped}
          onPress={handleFlip}
        />
      )}

      <View style={styles.navigationButtons}>
        <Button
          mode="contained"
          onPress={handlePrevious}
          disabled={!hasPrevious}
          buttonColor={theme.colors.secondary}
          style={styles.navButton}
        >
          Previous
        </Button>
        <Button
          mode="contained"
          onPress={handleNext}
          disabled={!hasNext}
          style={styles.navButton}
        >
          Next
        </Button>
      </View>

      <Button
        mode="text"
        onPress={() => router.back()}
        style={styles.backButton}
      >
        Back to Categories
      </Button>

      <CustomText variant="bodySmall" style={styles.disclaimer}>
        Note: These flashcards are generated by AI and may contain inaccuracies.
        They are regularly reviewed, and a verified sign will appear if approved
        by our team.
      </CustomText>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
  },
  centered: {
    justifyContent: "center",
    alignItems: "center",
  },
  header: {
    marginBottom: 20,
    alignItems: "center",
  },
  navigationButtons: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 20,
  },
  navButton: {
    flex: 1,
    marginHorizontal: 5,
  },
  backButton: {
    marginTop: 20,
  },
  errorText: {
    color: "red",
    marginBottom: 16,
    textAlign: "center",
  },
  disclaimer: {
    marginTop: 20,
    textAlign: "center",
  },
});
